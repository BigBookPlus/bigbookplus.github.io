import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as t}from"./app-d4e9035c.js";const e="/assets/image/in-post/curved_text_paddleocr/det_res_img623.jpg",i={},l=t('<figure><img src="'+e+`" alt="Detection Result" tabindex="0" loading="lazy"><figcaption>Detection Result</figcaption></figure><p>Text Detection Task is an old topic of Detction tasks. Curved text is much more free form. in this Post, we show you how to run the curved text detection by PaddleOCR.</p><h2 id="setup-environment" tabindex="-1"><a class="header-anchor" href="#setup-environment" aria-hidden="true">#</a> Setup Environment</h2><p>Create a virtual environment named paddle_env.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">--name</span> paddle_env <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then activate it.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda activate paddle_env 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Install paddlepaddle and paddle ocr packages through pip.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> paddlepaddle
pip <span class="token function">install</span> <span class="token string">&quot;paddleocr&gt;=2.0.1&quot;</span> <span class="token comment"># Recommend to use version 2.0.1+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="test-environment" tabindex="-1"><a class="header-anchor" href="#test-environment" aria-hidden="true">#</a> Test Environment</h2><p>Test the installations.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://paddleocr.bj.bcebos.com/dygraph_v2.1/ppocr_img.zip
<span class="token function">unzip</span> ppocr_img.zip
paddleocr <span class="token parameter variable">--image_dir</span> ./ppocr_img/imgs_en/img_12.jpg <span class="token punctuation">\\</span>
        <span class="token parameter variable">--use_angle_cls</span> <span class="token boolean">true</span> <span class="token parameter variable">--lang</span> en <span class="token parameter variable">--use_gpu</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="curved-text-detection-with-sast" tabindex="-1"><a class="header-anchor" href="#curved-text-detection-with-sast" aria-hidden="true">#</a> Curved Text Detection with SAST</h2><p>Clone PaddleOCR repo from github. Checkout the dynamic graph branch.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/PaddlePaddle/PaddleOCR.git
<span class="token builtin class-name">cd</span> PaddleOCR
<span class="token function">git</span> checkout dygraph
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Download the training model of SAST.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> models
<span class="token builtin class-name">cd</span> models
<span class="token function">wget</span> https://paddleocr.bj.bcebos.com/dygraph_v2.0/en/det_r50_vd_sast_totaltext_v2.0_train.tar
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> det_r50_vd_sast_totaltext_v2.0_train.tar
<span class="token builtin class-name">cd</span> - <span class="token comment">#return to PaddleOCR repo path</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The training model of SAST need to be converted into inference model.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python tools/export_model.py <span class="token parameter variable">-c</span> configs/det/det_r50_vd_sast_totaltext.yml <span class="token punctuation">\\</span>
        <span class="token parameter variable">-o</span> <span class="token assign-left variable">Global.pretrained_model</span><span class="token operator">=</span>./models/det_r50_vd_sast_totaltext_v2.0_train/best_accuracy <span class="token punctuation">\\</span>
        <span class="token assign-left variable">Global.save_inference_dir</span><span class="token operator">=</span>./inference/det_sast_tt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After convertion succeed, a new folder named inference will be created.</p><p>Now we are good to run the curved text detction.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python tools/infer/predict_det.py <span class="token parameter variable">--det_algorithm</span><span class="token operator">=</span><span class="token string">&quot;SAST&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">--image_dir</span><span class="token operator">=</span><span class="token string">&quot;./doc/imgs_en/img623.jpg&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">--det_model_dir</span><span class="token operator">=</span><span class="token string">&quot;./inference/det_sast_tt/&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">--det_sast_polygon</span><span class="token operator">=</span>True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="Detection Result" tabindex="0" loading="lazy"><figcaption>Detection Result</figcaption></figure>',23),d=[l];function r(o,c){return n(),s("div",null,d)}const v=a(i,[["render",r],["__file","2022-04-14-curved-text-detection-by-paddleocr.html.vue"]]);export{v as default};
