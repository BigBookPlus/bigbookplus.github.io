import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as i,d as n,e as s,b as e,f as t}from"./app-98c592fe.js";const l={},u=t('<p>现在我自己的几乎所有C/C++项目均使用CMake管理。CMake语法简洁功能强大，并且大部分主流C/C++ Lib库都内建了对CMake的支持。我在工作中主要使用到比较有代表性的Lib库：</p><ul><li><p>OpenCV</p><p>OpenCV是Intel维护的开源库，图像处理必备</p></li><li><p>Boost</p><p>Boost是对C++语言最重要的扩展库，提供了对标注库的扩展、标准编译器尚未支持的新特性和一些语法糖</p></li><li><p>Qt</p><p>强大的UI库</p></li><li><p>CUDA</p><p>NVIDIA显卡并行加速支持</p></li></ul><p>下面从一个最简单的<code>Hello CMake</code>程序开始，介绍CMake在实际使用中的一些方式。</p><h3 id="nearly-empty-c-c-project" tabindex="-1"><a class="header-anchor" href="#nearly-empty-c-c-project" aria-hidden="true">#</a> Nearly Empty C/C++ Project</h3>',4),d={href:"https://github.com/ttroy50/cmake-examples/tree/master/01-basic/A-hello-cmake",target:"_blank",rel:"noopener noreferrer"},r=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello CMake!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有外部依赖，甚至也没有多余的逻辑，这基本就是C++的HelloWorld代码，只不过打印输出变成了<code>Hello CMake</code>。在项目路径下，添加CMakeLists.txt文件，写入如下内容：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span><span class="token punctuation">)</span>

<span class="token comment"># Set the project name</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>hello_cmake<span class="token punctuation">)</span>

<span class="token comment"># Add an executable</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello_cmake main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目路径下执行如下命令，即可完成编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./hello_cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出<code>Hello CMake</code>，编译成功。</p><h3 id="cmake-with-opencv" tabindex="-1"><a class="header-anchor" href="#cmake-with-opencv" aria-hidden="true">#</a> CMake with OpenCV</h3><p>那么如果想在项目中调用OpenCV，该怎么做呢？</p><p>写一个简单的程序<code>cv-test.cpp</code>，调用OpenCV进行读图像和显示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui.hpp&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;usage: DisplayImage.out &lt;Image_Path&gt;&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cv<span class="token double-colon punctuation">::</span>Mat image<span class="token punctuation">;</span>
    image <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> image<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;No image data&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">&quot;Display Image&quot;</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的<code>CMakeLists.txt</code>文件：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span> DisplayImage <span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span> OpenCV REQUIRED <span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span> <span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span> <span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span> cv-test cv-test.cpp <span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span> cv-test <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就OK了。其实关键内容主要是这3行：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span> OpenCV REQUIRED <span class="token punctuation">)</span> 
<span class="token keyword">include_directories</span><span class="token punctuation">(</span> <span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span> cv-test <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然前提是你的OpenCV正确安装了，并且环境变量<code>OpenCV_DIR</code>没问题。如果没有设置<code>OpenCV_DIR</code>环境变量，或者系统中有多个版本的OpenCV，想指定某特定版本，比如这里我想指定我自己编译的支持了CUDA11的<code>OpenCV 4.5.2</code>，可以增加如下一行：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>OpenCV_DIR D:/WORK/opencv-github/opencv452/build-cuda11/install<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把后面的路径改成自己的即可。</p><h3 id="cmake-with-boost" tabindex="-1"><a class="header-anchor" href="#cmake-with-boost" aria-hidden="true">#</a> CMake with Boost</h3><p>支持Boost的配置更简单，只需要搞定这两个环境变量: <code>Boost_INCLUDE_DIR</code>、<code>Boost_LIBRARY_DIRS</code>。</p><p>为了使用简便，我们开启了<code>Boost_USE_STATIC_LIBS</code>变量支持静态链接，这样可以省掉<code>target_link_libraries</code>指令。静态链接也是Boost库的常用方法。</p><p>个人习惯的原因，我先执行了几个unset对环境变量进行清除，再根据自己的路径，对Boost的变量进行设置，最后加入find_package等指令。这里只列举需要新增的内容：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>Boost_USE_STATIC_LIBS <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>Boost_USE_MULTITHREADED <span class="token boolean">ON</span><span class="token punctuation">)</span>

<span class="token keyword">unset</span><span class="token punctuation">(</span>Boost_LIBRARIES<span class="token punctuation">)</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span>Boost_INCLUDE_DIR <span class="token variable">CACHE</span><span class="token punctuation">)</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span>Boost_LIBRARY_DIRS <span class="token variable">CACHE</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span>Boost_INCLUDE_DIR D:/Lib/boost_1_76_0<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>Boost_LIBRARY_DIRS D:/Lib/boost_1_76_0/lib64-msvc-<span class="token number">14.2</span><span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>Boost COMPONENTS system filesystem json REQUIRED<span class="token punctuation">)</span> <span class="token comment"># for example</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> Boost_FOUND<span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;Not found Boost&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>Boost_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmake-with-qt" tabindex="-1"><a class="header-anchor" href="#cmake-with-qt" aria-hidden="true">#</a> CMake with Qt</h3><p>Qt也内建了对CMake的支持。Qt的编译流程比较复杂，因为是GUI的框架，涉及到组织资源文件、生成UI代码等步骤，似乎离不开QtCreator或者VS+Qt Plugin。</p><p>但是如果尝试使用CMake进行组织Qt项目，life will be much easier.</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.1.0</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>helloworld <span class="token property">VERSION</span> <span class="token number">1.0.0</span> LANGUAGES CXX<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTOMOC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTORCC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTOUIC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_VERSION</span> <span class="token operator">VERSION_LESS</span> <span class="token string">&quot;3.7.0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_INCLUDE_CURRENT_DIR</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>Qt5 COMPONENTS Widgets REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>helloworld
    mainwindow.ui
    mainwindow.cpp
    main.cpp
    resources.qrc
<span class="token punctuation">)</span>

<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>helloworld <span class="token inserted class-name">Qt5::Widgets</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmake-with-cuda" tabindex="-1"><a class="header-anchor" href="#cmake-with-cuda" aria-hidden="true">#</a> CMake with CUDA</h3><p>CMake 3.9以上的版本对CUDA开启原生支持，只需要在<code>CMakeLists.txt</code>文件开头的<code>project</code>指令中<code>LANGUAGES</code>参数增加<code>CUDA</code>：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">project</span><span class="token punctuation">(</span>cuda-demo <span class="token property">VERSION</span> <span class="token number">0.1.0</span> LANGUAGES CXX CUDA<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="控制编译生成文件的输出路径" tabindex="-1"><a class="header-anchor" href="#控制编译生成文件的输出路径" aria-hidden="true">#</a> 控制编译生成文件的输出路径</h3><p>有时候一个项目中的多个子项目互相依赖，但是代码往往是分开的。即使上层用<code>add_subdirectory</code>指令进行组织，cmake也会默认按照项目的目录层次进行编译生成，这样会导致互相依赖的可执行文件和动态库生成在不同的子目录，互相访问不到。为了调试方便，可以令所有生成的可执行文件在指定目录下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/bin<span class="token punctuation">)</span>   <span class="token comment"># set executable file output dir </span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/bin<span class="token punctuation">)</span>      <span class="token comment"># set library file output dir </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h3>`,35),k={href:"https://github.com/ttroy50/cmake-examples",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.opencv.org/4.5.2/db/df5/tutorial_linux_gcc_cmake.html",target:"_blank",rel:"noopener noreferrer"};function m(b,_){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("最简单的CMakeLists文件，可以参考"),n("a",d,[s("hello-cmake"),e(a)]),s("，非常的简洁，这里我略加修改引用一下。假设我们的项目里面只有这么一个代码文件，它的内容是这样的：")]),r,n("p",null,[n("a",k,[s("cmake-examples"),e(a)])]),n("p",null,[n("a",v,[s("Using OpenCV with gcc and CMake"),e(a)])])])}const C=p(l,[["render",m],["__file","2021-08-20-cmake-manage-project.html.vue"]]);export{C as default};
