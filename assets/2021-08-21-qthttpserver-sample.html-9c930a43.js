import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,d as t,f as u}from"./app-819b17d9.js";const l={},i=n("h2",{id:"client-http-post",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#client-http-post","aria-hidden":"true"},"#"),s(" Client HTTP POST")],-1),r={href:"http://127.0.0.1:8888/post/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://127.0.0.1:8888/post/",target:"_blank",rel:"noopener noreferrer"},d=u(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>QCoreApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
QNetworkAccessManager <span class="token operator">*</span>mgr <span class="token operator">=</span> <span class="token keyword">new</span> QNetworkAccessManager<span class="token punctuation">;</span>
<span class="token keyword">const</span> QUrl <span class="token function">url</span><span class="token punctuation">(</span><span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8888/post/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QNetworkRequest <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>QNetworkRequest<span class="token double-colon punctuation">::</span>ContentTypeHeader<span class="token punctuation">,</span> <span class="token string">&quot;application/json; charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QJsonObject obj<span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">;</span>
QJsonDocument <span class="token function">doc</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
QByteArray data <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QNetworkReply <span class="token operator">*</span>reply <span class="token operator">=</span> mgr<span class="token operator">-&gt;</span><span class="token function">post</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QNetworkReply<span class="token double-colon punctuation">::</span>finished<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>reply<span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QNetworkReply<span class="token double-colon punctuation">::</span>NoError<span class="token punctuation">)</span><span class="token punctuation">{</span>
        QString contents <span class="token operator">=</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>reply<span class="token operator">-&gt;</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        QString err <span class="token operator">=</span> reply<span class="token operator">-&gt;</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    reply<span class="token operator">-&gt;</span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mgr<span class="token operator">-&gt;</span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-server" tabindex="-1"><a class="header-anchor" href="#http-server" aria-hidden="true">#</a> Http Server</h2><p>而这个本地的Server，亦可使用QtHttpServer方便实现：</p><p>Server can be implemented by QtHttpServer easily, too.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>QHttpServer http_server<span class="token punctuation">;</span>
http_server<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token string">&quot;Hello QtHttpServer&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http_server<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;/post/&quot;</span><span class="token punctuation">,</span> QHttpServerRequest<span class="token double-colon punctuation">::</span>Method<span class="token double-colon punctuation">::</span>POST<span class="token punctuation">,</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> QHttpServerRequest <span class="token operator">&amp;</span>request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;received requestBody&quot;</span> <span class="token operator">&lt;&lt;</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> QJsonObject
    <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;finish&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http_server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>QHostAddress<span class="token double-colon punctuation">::</span>Any<span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code-is-available" tabindex="-1"><a class="header-anchor" href="#code-is-available" aria-hidden="true">#</a> Code is available</h2>`,6),v={href:"https://github.com/BigBookPlus/qthttpserver-sample-with-client.git",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),h={href:"https://stackoverflow.com/questions/60107604/how-to-send-a-post-request-in-qt-with-the-json-body",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/qt-labs/qthttpserver",target:"_blank",rel:"noopener noreferrer"};function f(g,q){const a=e("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("假设"),n("a",r,[s("http://127.0.0.1:8888/post/"),t(a)]),s("是一个能够接受POST请求的路径，我们想要向它提交一段json数据，用Qt可以这样实现：")]),n("p",null,[s("Suppose we want to make an HTTP POST with json body to "),n("a",k,[s("http://127.0.0.1:8888/post/"),t(a)]),s(".")]),d,n("p",null,[s("Please refer to my project: "),n("a",v,[s("qthttpserver-sample-with-client"),t(a)])]),b,n("p",null,[n("a",h,[s("How to send a POST request in Qt with the JSON body"),t(a)])]),n("p",null,[n("a",m,[s("qt-labs/qthttpserver"),t(a)])])])}const Q=p(l,[["render",f],["__file","2021-08-21-qthttpserver-sample.html.vue"]]);export{Q as default};
