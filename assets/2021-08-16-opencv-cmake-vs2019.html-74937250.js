import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,f as n}from"./app-819b17d9.js";const s="/assets/image/in-post/opencv_cmake_vs2019/0.png",o="/assets/image/in-post/opencv_cmake_vs2019/1.png",t="/assets/image/in-post/opencv_cmake_vs2019/2.png",g="/assets/image/in-post/opencv_cmake_vs2019/3.png",c="/assets/image/in-post/opencv_cmake_vs2019/4.png",p="/assets/image/in-post/opencv_cmake_vs2019/5.png",m="/assets/image/in-post/opencv_cmake_vs2019/6.png",l="/assets/image/in-post/opencv_cmake_vs2019/7.png",r="/assets/image/in-post/opencv_cmake_vs2019/8.png",d="/assets/image/in-post/opencv_cmake_vs2019/9.png",u="/assets/image/in-post/opencv_cmake_vs2019/10.png",_="/assets/image/in-post/opencv_cmake_vs2019/11.png",f="/assets/image/in-post/opencv_cmake_vs2019/12.png",v="/assets/image/in-post/opencv_cmake_vs2019/13.png",b={},k=n(`<p>使用C++进行计算机图像处理方向的开发，OpenCV是最常使用的Lib之一。个人对OpenCV的使用，大概从2.4版本开始，一直到现在的Release版4.5.2[现在是2021.06.08]。</p><p>OpenCV功能比较丰富，包含了传统图像处理的绝大部分经典算法，其基本矩阵类型Mat简单强大，现在还加入了DNN模块支持深度学习模型推理，这两部分都可以单独深入讨论。最近决定使用DNN模块进行算法部署，需要用到GPU加速,而官方提供的标准编译安装包不满足需求了，遂决定自己动手编译，定制符合自己需求的OpenCV Lib。这对自己日常的开发工作来说，其实是一本万利的。</p><p>由于业务需求，本文实践在Windows 10操作系统下进行。在Linux下进行此类编译更为便捷，问题也更少，步骤基本类似。好在Windows平台下的Visual Stuido对CMake的支持也越做越好了。</p><p>按照自己的习惯，我在自己的work目录下建立了一个名为opencv-github的文件夹，随后从git上把最新的opencv和opencv-contrib牵下来。opencv-contrib一般包含非release组件以及nonfree组件。</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>git clone https://github.com/opencv/opencv.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+s+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>git clone https://github.com/opencv/opencv_contrib.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>如果安装了visual stuido 2019，cmake-gui大概率可以从cmd控制台直接呼出来。打开cmake-gui后，配置一下源码路径和编译路径。我的配置如下:</p><p>源码路径 D:/WORK/opencv-github/opencv</p><p>编译路径 D:/WORK/opencv-github/opencv/build</p><figure><img src="'+t+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>点击Configure，选择vs2019 x64编译</p><figure><img src="'+g+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="'+c+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>第一次Configure，ippicv依赖包下载失败，重新configure了一次，这次成功了。</p><figure><img src="'+p+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>搜索OPENCV_EXTRA_MODULES_PATH选型，填入OpenCV Contrib的路径</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>D:/WORK/opencv-github/opencv_contrib/modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>搜索cuda，勾选OPENCV DNN CUDA和WITH CUDA。不要勾选 BUILD CUDA STUBS。</p><p>cuda是要提前安装的，cudnn最好也安装上，注意cuda和cudnn版本的对应。</p><p>再次点击configure。</p><figure><img src="'+l+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>选中BUILD opencv world选项。这里主要是为了使用便捷，一个胜过你所有，不必单独一个个去链接。当然，单独选择链接组件的方式更有利于控制release程序的体积，有利有弊吧。</p><figure><img src="'+r+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>选中 enable nonfree选项，打开这个选项会把一些不能免费商用的算法编译进去，做些研究和实验还是可以的。之前的nonfree算法中最著名的当属sift，不过现在sift已经免费啦。</p><figure><img src="'+d+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>现在点击generate</p><figure><img src="'+u+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>Generate结束。可以点击Open Project了。</p><figure><img src="'+_+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>这样就呼出了宇宙第一IDE 2019。然后就可以开始编译啦~</p><figure><img src="'+f+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>展开CMakeTargets，选择ALL BUILD</p><figure><img src="'+v+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>右键菜单选择build或者直接f7键，即可开始编译。ALL BUILD编译结束后，再选中INSTALL执行编译，这样编译出来的头文件、lib文件、dll文件和cmake文件就在开头提到的build目录下的install目录下面了。其实这里的ALL BUILD和INSTALL，相当于linux下面常见的make和make install。</p><p>现在已经有了头文件、lib文件、dll文件和cmake文件，就可以开始愉快的开发了哦。</p>',38),x=[k];function L(C,h){return e(),a("div",null,x)}const z=i(b,[["render",L],["__file","2021-08-16-opencv-cmake-vs2019.html.vue"]]);export{z as default};
