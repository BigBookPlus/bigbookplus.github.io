import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as o,a as e,b as a,d as s,f as r}from"./app-819b17d9.js";const c={},p=r(`<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>在一个很久没有同步过的测试机上面试图将代码仓库更新到最新版本，提示报错：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token property">error:</span> <span class="token property">Your local changes to the following files would be overwritten by merge:</span>
        app<span class="token operator">/</span>client<span class="token punctuation">.</span>py
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        configs<span class="token operator">/</span>file<span class="token punctuation">.</span>yml
Please commit your changes or stash them before you merge<span class="token punctuation">.</span>
Aborting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这台机器的仓库是很久之前的版本；但是因为调试的缘故，直接在该机器上改过几行代码，导致存在本地修改，这就是不能直接git pull的原因。</p><p>似乎可以直接通过意念，无视本地修改，强行更新到仓库的最新版本。直觉上来讲，这个功能一定也是存在的，只是在git上体现的更加理性一些。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>想要达成此种效果，执行以下命令即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
<span class="token function">git</span> branch backup-master
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行是更新所有远程修改到本地，第二行是把当前修改作为分支备份，第三行就开始了强行git pull。</p><p>一般来讲，这样就可以达到强行更新到最新的版本的目的。如果还不放心，或者确实不够新，可以再补充执行以下两条命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>测试机上的更新一般就是改些常量，比如服务器地址或者线程数之类。如果影响到了新版版本的测试，直接无视覆盖就好，所以这里备份也比较潦草。</p><p>如果非常重视本地改动，说明本地修改比较重要，可以在切换到origin/master之前，执行一步merge,</p><p>例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
<span class="token function">git</span> stash
<span class="token function">git</span> merge <span class="token string">&#39;@{u}&#39;</span>
<span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多内容可参考</p>`,17),d={href:"https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files",target:"_blank",rel:"noopener noreferrer"},u=e("br",null,null,-1),h={href:"https://www.freecodecamp.org/news/git-pull-force-how-to-overwrite-local-changes-with-git/",target:"_blank",rel:"noopener noreferrer"};function g(v,m){const n=t("ExternalLinkIcon");return l(),o("div",null,[p,e("p",null,[e("a",d,[a("how-do-i-force-git-pull-to-overwrite-local-files"),s(n)]),u,e("a",h,[a("git-pull-force-how-to-overwrite-local-changes-with-git"),s(n)])])])}const k=i(c,[["render",g],["__file","git-pull-ignore-local-changes.html.vue"]]);export{k as default};
