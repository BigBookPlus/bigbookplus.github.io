import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as t,c as l,a as e,b as a,d as s,f as r}from"./app-dabd2275.js";const o={},c=r('<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在操作系统中发行应用程序，尤其是python应用程序，其环境配置常常是分发过程中的重要一环。如果像开发的时候那样手动构建，一方面工作量难以承受，另一方面经常会出现各种各样的问题。在不同的目标主机上手动构建环境，会受到目标操作系统的版本、文件系统、所安装软件包的情况影响。而且开发时所使用的一些默认安装包，到了发布的时候可能已经都被更新过，所以手动构建要求使用的包版本号也精确记录。</p><h2 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h2><p>安装GPU docker，首先需要安装docker，然后在docker的基础上安装nvidia-docker。</p><h3 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker" aria-hidden="true">#</a> 安装docker</h3>',5),p={href:"https://docs.docker.com/engine/install/ubuntu",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"安装nvidia-docker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装nvidia-docker","aria-hidden":"true"},"#"),a(" 安装nvidia-docker")],-1),v={href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker",target:"_blank",rel:"noopener noreferrer"},h=r(`<h2 id="在docker中显示gui" tabindex="-1"><a class="header-anchor" href="#在docker中显示gui" aria-hidden="true">#</a> 在docker中显示GUI</h2><p>如果在Docker中开发的是带有GUI的应用程序，也就是在docker中显示GUI，需要启动支持GUI的docker镜像。</p><p>首先配置一下xhost</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xhost +local:docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xhost +
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动docker，由于需要docker中显示GUI，所以加入参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> /tmp/.X11-unix:/tmp/.X11-unix <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span><span class="token environment constant">$DISPLAY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完整指令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mydocker <span class="token parameter variable">--gpus</span> all --shm-size<span class="token operator">=</span>1g <span class="token parameter variable">--ulimit</span> <span class="token assign-left variable">memlock</span><span class="token operator">=</span>-1 <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /tmp/.X11-unix:/tmp/.X11-unix <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span><span class="token environment constant">$DISPLAY</span> snn-server:basic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，这里是启动了GPU docker，--gpus all是指定使用所有的GPU，如果只使用一块GPU，可以指定为--gpus 0。</p><h2 id="在docker中访问usb相机" tabindex="-1"><a class="header-anchor" href="#在docker中访问usb相机" aria-hidden="true">#</a> 在Docker中访问usb相机</h2><p>如果需要在docker中访问usb相机，需要在启动docker的时候，追加以下参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> /dev/video0:/dev/video0 <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/video0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就把宿主机的/dev/video0映射到docker中的/dev/video0，然后在docker中就可以访问到相机了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mydocker <span class="token parameter variable">--gpus</span> all --shm-size<span class="token operator">=</span>1g <span class="token parameter variable">--ulimit</span> <span class="token assign-left variable">memlock</span><span class="token operator">=</span>-1 <span class="token parameter variable">-v</span> /dev/video0:/dev/video0 <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/video0 <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /tmp/.X11-unix:/tmp/.X11-unix <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span><span class="token environment constant">$DISPLAY</span> myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在docker镜像中开放端口" tabindex="-1"><a class="header-anchor" href="#在docker镜像中开放端口" aria-hidden="true">#</a> 在Docker镜像中开放端口</h2><p>如果需要从docker中对外提供服务，需要在docker中向宿主机进行端口映射，才可以从宿主机访问到docker中的服务。</p><p>Docker中的端口映射，需要在启动docker的时候，加入参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，宿主机的8080端口就映射到docker中的8080端口了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mydocker <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080  <span class="token parameter variable">--gpus</span> all --shm-size<span class="token operator">=</span>1g <span class="token parameter variable">--ulimit</span> <span class="token assign-left variable">memlock</span><span class="token operator">=</span>-1 <span class="token parameter variable">-v</span> /dev/video0:/dev/video0 <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/video0 <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /tmp/.X11-unix:/tmp/.X11-unix <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span><span class="token environment constant">$DISPLAY</span> myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="开启更多的gpu功能支持" tabindex="-1"><a class="header-anchor" href="#开启更多的gpu功能支持" aria-hidden="true">#</a> 开启更多的GPU功能支持</h2><p>我的程序后面用到了GPU的一些高级功能，比如GPU的nvcuvid解码，这需要做更多的设置，否则在程序启动对应解码库的时候，报错如下：</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>[h264_cuvid @ 0x7f2d48048580] Cannot load libnvcuvid.so.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为docker中的GPU环境，没有开启nvcuvid的支持，需要在启动docker的时候，加入参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">--runtime</span><span class="token operator">=</span>nvidia <span class="token parameter variable">-e</span> <span class="token assign-left variable">NVIDIA_VISIBLE_DEVICES</span><span class="token operator">=</span>all <span class="token parameter variable">-e</span> <span class="token assign-left variable">NVIDIA_DRIVER_CAPABILITIES</span><span class="token operator">=</span>compute,utility,video 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，这需要可能需要您的宿主机本身可以支持这方面的功能</p><h2 id="创建本地镜像中心" tabindex="-1"><a class="header-anchor" href="#创建本地镜像中心" aria-hidden="true">#</a> 创建本地镜像中心</h2><p>开发中和开发好的镜像都可以选择在dockerhub上暂存，不同阶段或者用途的docker则以不同的tag或仓库名称来区分管理。免费的dockerhub账号有一个私有仓库和无限的公共仓库可供使用。不管是用来开发的镜像，还是准备分发的镜像，体积都比较大，一般要以GB为单位，因特网直接上传下载可能需要等待较长时间；因此，也可以在局域网中配置一台硬盘空间较大的主机，做为内网的镜像中心。</p><p>选好机器后，在机器上做好docker的基本配置，然后在联网状态下，执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--name</span> xy-registry <span class="token parameter variable">-v</span> /home/centos/registry:/registry  registry:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，内网镜像中心，其实也是一个docker镜像的形式，把registry镜像拉下来，自动启动服务运行在机器上。需要配置的仅是完成端口映射和目录绑定。</p><h3 id="一些可选参数" tabindex="-1"><a class="header-anchor" href="#一些可选参数" aria-hidden="true">#</a> 一些可选参数</h3><ul><li>-d，后台运行容器</li><li>-p 5000:5000 ，映射容器5000端口至宿主机5000端口。</li><li>--restart always，设置重新启动策略，在docker重新启动时自动重新启动容器my-registry。</li><li>--name 给容器命名。my-registry，</li><li>-v /registry:/registry，把docker容器中/registry目录的数据加载到宿主机的/registry目录，宿主机的/registry目录如果不存在会自动创建。目的是为了防止docker私有仓库这个容器被删除时，仓库里的镜像也会被删除。宿主机查看到的私有仓库镜像就在这个目录中。</li><li>-e REGISTRY_STORAGE_DELETE_ENABLED，设置是否允许删除仓库存储的镜像。</li><li>-e REGISTRY_HTTP_ADDR=0.0.0.0:5000，设置镜像仓库地址。</li></ul><h3 id="上传镜像" tabindex="-1"><a class="header-anchor" href="#上传镜像" aria-hidden="true">#</a> 上传镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit container_id ip:port/image_name:tag
<span class="token function">docker</span> push ip:port/image_name:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回收空间" tabindex="-1"><a class="header-anchor" href="#回收空间" aria-hidden="true">#</a> 回收空间</h2><p>首先查看docker的磁盘空间占用情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以看到，docker的磁盘空间占用情况，包括镜像、容器、卷和网络的占用情况。<br> 清理的方式有两种，一种是清理所有的无用镜像，一种是清理指定的镜像。</p><h3 id="清理所有的无用镜像" tabindex="-1"><a class="header-anchor" href="#清理所有的无用镜像" aria-hidden="true">#</a> 清理所有的无用镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="清理指定的镜像" tabindex="-1"><a class="header-anchor" href="#清理指定的镜像" aria-hidden="true">#</a> 清理指定的镜像</h3><p>首先列出所有的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除指定的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi image_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gpu-docker-with-anaconda" tabindex="-1"><a class="header-anchor" href="#gpu-docker-with-anaconda" aria-hidden="true">#</a> GPU Docker with Anaconda</h2><p>再进一步，如果想要一个GPU docker，又想要在docker中安装anaconda，那么就需要在docker中安装cuda和anaconda了。<br> cuda的docker可以直接从docker hub拉取，anaconda的docker需要自己构建。<br> 也是可以考虑两种方式，一种是构建DockerFile，一种是直接手动构建镜像。</p><h3 id="第一种方式-构建dockerfile" tabindex="-1"><a class="header-anchor" href="#第一种方式-构建dockerfile" aria-hidden="true">#</a> 第一种方式:构建DockerFile</h3><div class="language-DockerFile line-numbers-mode" data-ext="DockerFile"><pre class="language-DockerFile"><code>FROM nvidia/cuda:11.3.0-devel-ubuntu20.04

# Add some dependencies
RUN apt-get clean &amp;&amp; apt-get update -y -qq
RUN apt-get install -y curl git build-essential

ENV PATH=&quot;/root/anaconda2/bin:\${PATH}&quot;

RUN curl --silent -O https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh \\
    &amp;&amp; bash Anaconda3-2023.03-Linux-x86_64.sh -b -p /root/anaconda3

RUN pip install keras &amp;&amp; conda install pygpu
RUN /bin/bash

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种方式-直接手动构建镜像" tabindex="-1"><a class="header-anchor" href="#第二种方式-直接手动构建镜像" aria-hidden="true">#</a> 第二种方式:直接手动构建镜像</h3><p>首先选择一个GPU docker拉取，这里我们选择的是配备有cuda11.3的ubuntu 20.04版本的镜像。当前时间是2023年，cuda已经更新到了12，ubuntu也已经发行到了版本号22，可以看出所选的版本是比较次新的版本，算是对兼容性的一个折衷。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nvidia/cuda:11.3.0-devel-ubuntu20.04
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后参照上一节的DockerFile安装anaconda。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,57),m={href:"https://blog.csdn.net/renfeigui0/article/details/103755823",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cloud.tencent.com/developer/article/1581147",target:"_blank",rel:"noopener noreferrer"},k={href:"https://medium.com/better-programming/docker-tips-clean-up-your-local-machine-35f370a01a78",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.docker.com/engine/install/ubuntu",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/NVIDIA/nvidia-docker/issues/766",target:"_blank",rel:"noopener noreferrer"};function x(I,D){const n=d("ExternalLinkIcon");return t(),l("div",null,[c,e("p",null,[a("参考链接 "),e("a",p,[a("https://docs.docker.com/engine/install/ubuntu"),s(n)])]),u,e("p",null,[a("参考链接 "),e("a",v,[a("https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"),s(n)])]),h,e("p",null,[e("a",m,[a("https://blog.csdn.net/renfeigui0/article/details/103755823"),s(n)])]),e("p",null,[e("a",b,[a("https://cloud.tencent.com/developer/article/1581147"),s(n)])]),e("p",null,[e("a",k,[a("https://medium.com/better-programming/docker-tips-clean-up-your-local-machine-35f370a01a78"),s(n)])]),e("p",null,[e("a",g,[a("https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"),s(n)])]),e("p",null,[e("a",f,[a("https://docs.docker.com/engine/install/ubuntu"),s(n)])]),e("p",null,[e("a",_,[a("https://github.com/NVIDIA/nvidia-docker/issues/766"),s(n)])])])}const P=i(o,[["render",x],["__file","2022-11-03-Use-Docker-for-GPU-and-Web-Camera-Applications.html.vue"]]);export{P as default};
