import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as i,a as s,b as n,d as c,f as a}from"./app-69c59381.js";const l={},u=a(`<h2 id="what-is-ocr" tabindex="-1"><a class="header-anchor" href="#what-is-ocr" aria-hidden="true">#</a> What is OCR?</h2><p>According to the wikipedia, OCR, which refers to <strong>Optical character recognition</strong> or <strong>optical character reader,</strong> is the electronic  or mechanical  conversion of images  of typed, handwritten or printed text into machine-encoded text.</p><h2 id="why-mmocr" tabindex="-1"><a class="header-anchor" href="#why-mmocr" aria-hidden="true">#</a> Why MMOCR?</h2><ul><li>Pytorch</li><li>Maintained by Openmmlab</li><li>Easy to train your own data</li><li>Can be deployed into C++ code</li></ul><p>Pytorch is sweet, it seems to have absorbed most of the advantages of current deep learning frameworks. It is maintained by the OpenMMLab, belongs to SenseTime, which means that this repo can live long and keep updating. MMOCR has a clear structure just like MMDetection. It has the experimental deployment code too.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>The installation guide in <a href="%5Bhttps://mmocr.readthedocs.io/en/latest/install.html%5D(https://mmocr.readthedocs.io/en/latest/install.html)">mmocr doc</a> is quite in great detail. I will show the setup process on my machine.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> open-mmlab <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>
conda activate open-mmlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we have an isolated virtual environment. Then I install PyTorch 1.10 with CUDA 10.2.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> <span class="token assign-left variable">pytorch</span><span class="token operator">=</span><span class="token number">1.10</span>.0 torchvision <span class="token assign-left variable">cudatoolkit</span><span class="token operator">=</span><span class="token number">10.2</span> <span class="token parameter variable">-c</span> pytorch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then install mmcv, mmdet.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> mmcv-full <span class="token parameter variable">-f</span> https://download.openmmlab.com/mmcv/dist/cu102/torch1.10.0/index.html
pip <span class="token function">install</span> mmdet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Clone MMOCR repo</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/open-mmlab/mmocr.git
<span class="token builtin class-name">cd</span> mmocr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Final step, build and install.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
pip <span class="token function">install</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span> <span class="token comment"># or &quot;python setup.py develop&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>There is an extra step in the mmocr doc website, which export the repo path into system env var PYTHONPATH. In my case, I always works inside the repo path, so I didn’t go with this step. If you need to import mmocr from other projects, you may need to do it.</p><h2 id="simple-test" tabindex="-1"><a class="header-anchor" href="#simple-test" aria-hidden="true">#</a> Simple test</h2><p>We can run a simple command to test our repo, this command will automatically downloads the weights file and do detection &amp; recognition end-to-end.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python mmocr/utils/ocr.py demo/demo_text_ocr.jpg --print-result <span class="token parameter variable">--imshow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Also, we can run text detection only. By specifying ‘det’ option, we test with the TextSnake algorithm.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python mmocr/utils/ocr.py demo/demo_text_det.jpg <span class="token parameter variable">--output</span> demo/det_out.jpg <span class="token parameter variable">--det</span> TextSnake <span class="token parameter variable">--recog</span> None <span class="token parameter variable">--export</span> demo/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="training-with-my-own-data" tabindex="-1"><a class="header-anchor" href="#training-with-my-own-data" aria-hidden="true">#</a> Training with my own data</h2><p>I’m trying to train our own text detection model. Download the prepared data file and train following the doc page is obviously not enough for me. My training data is labeled in PASCAL_VOC format, which means we need more work to do. Create a folder in repo named data, then put dataset folder in it or create a link by command ln -s into it.</p><p>We first create a python scripts named gen_ids.py to generate the training and testing file ids.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">parse_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;generate id list file.&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--path&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span> <span class="token string">&#39;path to annotation files dir.&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">#parser.add_argument(&#39;--output&#39;, type=str, default=&#39;./ids.txt&#39;, help= &#39;path to output.&#39;)</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">generate_ids</span><span class="token punctuation">(</span>anno_path <span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./train_ids.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ftrain<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test_ids.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ftest<span class="token punctuation">:</span>
        cntr<span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">for</span> path<span class="token punctuation">,</span> folders<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>anno_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> file_name <span class="token keyword">in</span> files<span class="token punctuation">:</span>
                <span class="token keyword">if</span> cntr <span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    ftest<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    ftrain<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
                cntr<span class="token operator">+=</span><span class="token number">1</span>
                
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    generate_ids<span class="token punctuation">(</span>args<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Suppose we are working in dataset path, say, data/dataset/, Pascal_voc format puts its annotations in the Annotation folder. We run this script.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python gen_ids.py <span class="token parameter variable">--path</span> ./Annotations/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Thus I have the train_ids.txt and test_ids.txt in my dataset folder.</p>`,29),r={href:"http://voc2coco.py",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> json
<span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ET
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token punctuation">,</span> List
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
<span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">get_label2id</span><span class="token punctuation">(</span>labels_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;id is 1 start&quot;&quot;&quot;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>labels_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        labels_str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    labels_ids <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>labels_str<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>labels_str<span class="token punctuation">,</span> labels_ids<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_annpaths</span><span class="token punctuation">(</span>ann_dir_path<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                 ann_ids_path<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                 ext<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                 annpaths_list_path<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># If use annotation paths list</span>
    <span class="token keyword">if</span> annpaths_list_path <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>annpaths_list_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            ann_paths <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ann_paths

    <span class="token comment"># If use annotaion ids list</span>
    ext_with_dot <span class="token operator">=</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> ext <span class="token keyword">if</span> ext <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>ann_ids_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        ann_ids <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ann_paths <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ann_dir_path<span class="token punctuation">,</span> aid<span class="token operator">+</span>ext_with_dot<span class="token punctuation">)</span> <span class="token keyword">for</span> aid <span class="token keyword">in</span> ann_ids<span class="token punctuation">]</span>
    <span class="token keyword">return</span> ann_paths

<span class="token keyword">def</span> <span class="token function">get_image_info</span><span class="token punctuation">(</span>annotation_root<span class="token punctuation">,</span> extract_num_from_imgid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> annotation_root<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> path <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        filename <span class="token operator">=</span> annotation_root<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        path <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    img_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
    img_id <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>img_name<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> extract_num_from_imgid <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>img_id<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        img_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> img_id<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    size <span class="token operator">=</span> annotation_root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">)</span>
    width <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    image_info <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;file_name&#39;</span><span class="token punctuation">:</span> filename<span class="token punctuation">,</span>
        <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> height<span class="token punctuation">,</span>
        <span class="token string">&#39;width&#39;</span><span class="token punctuation">:</span> width<span class="token punctuation">,</span>
        <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> img_id
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> image_info

<span class="token keyword">def</span> <span class="token function">get_coco_annotation_from_obj</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> label2id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    label <span class="token operator">=</span> obj<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> label <span class="token keyword">in</span> label2id<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Error: </span><span class="token interpolation"><span class="token punctuation">{</span>label<span class="token punctuation">}</span></span><span class="token string"> is not in label2id !&quot;</span></span>
    category_id <span class="token operator">=</span> label2id<span class="token punctuation">[</span>label<span class="token punctuation">]</span>
    bndbox <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;bndbox&#39;</span><span class="token punctuation">)</span>
    xmin <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>bndbox<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;xmin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    ymin <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>bndbox<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;ymin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    xmax <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>bndbox<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;xmax&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ymax <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>bndbox<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">&#39;ymax&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> xmax <span class="token operator">&gt;</span> xmin <span class="token keyword">and</span> ymax <span class="token operator">&gt;</span> ymin<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Box size error !: (xmin, ymin, xmax, ymax): </span><span class="token interpolation"><span class="token punctuation">{</span>xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    o_width <span class="token operator">=</span> xmax <span class="token operator">-</span> xmin
    o_height <span class="token operator">=</span> ymax <span class="token operator">-</span> ymin
    ann <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;area&#39;</span><span class="token punctuation">:</span> o_width <span class="token operator">*</span> o_height<span class="token punctuation">,</span>
        <span class="token string">&#39;iscrowd&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string">&#39;bbox&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> o_width<span class="token punctuation">,</span> o_height<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;category_id&#39;</span><span class="token punctuation">:</span> category_id<span class="token punctuation">,</span>
        <span class="token string">&#39;ignore&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string">&#39;segmentation&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax<span class="token punctuation">,</span> xmin<span class="token punctuation">,</span> ymax<span class="token punctuation">]</span> <span class="token punctuation">]</span>  <span class="token comment"># This script is not for segmentation</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ann

<span class="token keyword">def</span> <span class="token function">convert_xmls_to_cocojson</span><span class="token punctuation">(</span>annotation_paths<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                             label2id<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                             output_jsonpath<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
                             extract_num_from_imgid<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    output_json_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;images&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;instances&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;annotations&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&quot;categories&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    bnd_id <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># START_BOUNDING_BOX_ID, TODO input as args ?</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Start converting !&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> a_path <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>annotation_paths<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Read annotation xml</span>
        ann_tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>a_path<span class="token punctuation">)</span>
        ann_root <span class="token operator">=</span> ann_tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>

        img_info <span class="token operator">=</span> get_image_info<span class="token punctuation">(</span>annotation_root<span class="token operator">=</span>ann_root<span class="token punctuation">,</span>
                                  extract_num_from_imgid<span class="token operator">=</span>extract_num_from_imgid<span class="token punctuation">)</span>
        img_id <span class="token operator">=</span> img_info<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span>
        <span class="token comment">#print(img_id+&#39; &#39;)</span>
        output_json_dict<span class="token punctuation">[</span><span class="token string">&#39;images&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>img_info<span class="token punctuation">)</span>

        <span class="token keyword">for</span> obj <span class="token keyword">in</span> ann_root<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ann <span class="token operator">=</span> get_coco_annotation_from_obj<span class="token punctuation">(</span>obj<span class="token operator">=</span>obj<span class="token punctuation">,</span> label2id<span class="token operator">=</span>label2id<span class="token punctuation">)</span>
            ann<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;image_id&#39;</span><span class="token punctuation">:</span> img_id<span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> bnd_id<span class="token punctuation">}</span><span class="token punctuation">)</span>
            output_json_dict<span class="token punctuation">[</span><span class="token string">&#39;annotations&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ann<span class="token punctuation">)</span>
            bnd_id <span class="token operator">=</span> bnd_id <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">for</span> label<span class="token punctuation">,</span> label_id <span class="token keyword">in</span> label2id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        category_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;supercategory&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> label_id<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> label<span class="token punctuation">}</span>
        output_json_dict<span class="token punctuation">[</span><span class="token string">&#39;categories&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>category_info<span class="token punctuation">)</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_jsonpath<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        output_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>output_json_dict<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_json<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>
        description<span class="token operator">=</span><span class="token string">&#39;This script support converting voc format xmls to coco format json&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--ann_dir&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;path to annotation files directory. It is not need when use --ann_paths_list&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--ann_ids&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;path to annotation files ids list. It is not need when use --ann_paths_list&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--ann_paths_list&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;path of annotation paths list. It is not need when use --ann_dir and --ann_ids&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--labels&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;path to label list.&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--output&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;output.json&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;path to output json file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--ext&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;additional extension of annotation file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--extract_num_from_imgid&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&quot;store_true&quot;</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Extract image number from the image filename&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    label2id <span class="token operator">=</span> get_label2id<span class="token punctuation">(</span>labels_path<span class="token operator">=</span>args<span class="token punctuation">.</span>labels<span class="token punctuation">)</span>
    ann_paths <span class="token operator">=</span> get_annpaths<span class="token punctuation">(</span>
        ann_dir_path<span class="token operator">=</span>args<span class="token punctuation">.</span>ann_dir<span class="token punctuation">,</span>
        ann_ids_path<span class="token operator">=</span>args<span class="token punctuation">.</span>ann_ids<span class="token punctuation">,</span>
        ext<span class="token operator">=</span>args<span class="token punctuation">.</span>ext<span class="token punctuation">,</span>
        annpaths_list_path<span class="token operator">=</span>args<span class="token punctuation">.</span>ann_paths_list
    <span class="token punctuation">)</span>
    convert_xmls_to_cocojson<span class="token punctuation">(</span>
        annotation_paths<span class="token operator">=</span>ann_paths<span class="token punctuation">,</span>
        label2id<span class="token operator">=</span>label2id<span class="token punctuation">,</span>
        output_jsonpath<span class="token operator">=</span>args<span class="token punctuation">.</span>output<span class="token punctuation">,</span>
        extract_num_from_imgid<span class="token operator">=</span>args<span class="token punctuation">.</span>extract_num_from_imgid
    <span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need to create a file named coco.names txt file, which contains only one line in my case.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then we can start converting.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python voc2coco<span class="token punctuation">.</span>py  <span class="token operator">-</span><span class="token operator">-</span>ann_dir <span class="token punctuation">.</span><span class="token operator">/</span>Annotations<span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>ann_ids <span class="token punctuation">.</span><span class="token operator">/</span>train_ids<span class="token punctuation">.</span>txt <span class="token operator">-</span><span class="token operator">-</span>labels <span class="token punctuation">.</span><span class="token operator">/</span>coco<span class="token punctuation">.</span>names  <span class="token operator">-</span><span class="token operator">-</span>output <span class="token punctuation">.</span><span class="token operator">/</span>annotations<span class="token operator">/</span>instances_training<span class="token punctuation">.</span>json <span class="token operator">-</span><span class="token operator">-</span>ext xml
python voc2coco<span class="token punctuation">.</span>py  <span class="token operator">-</span><span class="token operator">-</span>ann_dir <span class="token punctuation">.</span><span class="token operator">/</span>Annotations<span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>ann_ids <span class="token punctuation">.</span><span class="token operator">/</span>test_ids<span class="token punctuation">.</span>txt <span class="token operator">-</span><span class="token operator">-</span>labels <span class="token punctuation">.</span><span class="token operator">/</span>coco<span class="token punctuation">.</span>names  <span class="token operator">-</span><span class="token operator">-</span>output <span class="token punctuation">.</span><span class="token operator">/</span>annotations<span class="token operator">/</span>instances_test<span class="token punctuation">.</span>json <span class="token operator">-</span><span class="token operator">-</span>ext xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we have the coco format annotation file in dataset folder. We are ready to train.</p><p>Create a new script in configs/<em>base</em>/det_datasets/new_dataset.py which can be adopted from configs/<em>base</em>/det_datasets/icdar2015.py and change several path variables. Then create another script from configs/textdet/dbnet/dbnet_r50dcnv2_fpnc_1200e_icdar2015.py, named configs/textdet/dbnet/dbnet_r50dcnv2_fpnc_1200e_new_dataset.py, just change the line for dataset configuration.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>_base_ = [
		...
    &#39;../../_base_/det_datasets/new_dataset.py&#39;, #&#39;../../_base_/det_datasets/icdar2015.py&#39;,
		...
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we are ready to start training with multiple gpus. MMOCR provided a handy shell script to train with multiple gpus, tools/dist_train.sh.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./tools/dist_train.sh configs/textdet/dbnet/dbnet_r50dcnv2_fpnc_1200e_new_dataset.py work_dirs/dbnet_r50dcnv2_fpnc_1200e_new_dataset 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Done. I use 8 gpus to train my model.</p><h2 id="p-s" tabindex="-1"><a class="header-anchor" href="#p-s" aria-hidden="true">#</a> P.S.</h2><p>I feel MMOCR is easy to configure and very stable. It record training logs automatically. The deployment code is ok to use, though is experimental. I have successfully transformed model to onnx and run with c++ code.</p>`,13);function d(m,v){const t=e("ExternalLinkIcon");return o(),i("div",null,[u,s("p",null,[n("We adopt from ICDAR format to train. ICDAR Dataset follows coco format, so we need to convert our pascal_voc format to coco format. We need to create another python script named "),s("a",r,[n("voc2coco.py"),c(t)]),n(" to do it. (Which is modified from others)")]),k])}const g=p(l,[["render",d],["__file","2022-03-04-MMOCR-Installation-Training-with-own-Data.html.vue"]]);export{g as default};
