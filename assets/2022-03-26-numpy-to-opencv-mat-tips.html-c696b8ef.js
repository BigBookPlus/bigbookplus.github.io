import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as l,f as a}from"./app-819b17d9.js";const i={},u=a(`<h2 id="sigmoid" tabindex="-1"><a class="header-anchor" href="#sigmoid" aria-hidden="true">#</a> Sigmoid</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A sigmoid function is a mathematical function having a characteristic &quot;S&quot;-shaped curve or sigmoid curve.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),r={href:"https://en.wikipedia.org/wiki/Sigmoid_function",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[s("It's formula: "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"S"),n("mo",{stretchy:"false"},"("),n("mi",null,"t"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mfrac",null,[n("mn",null,"1"),n("mrow",null,[n("mn",null,"1"),n("mo",null,"+"),n("msup",null,[n("mi",null,"e"),n("mrow",null,[n("mo",null,"âˆ’"),n("mi",null,"t")])])])])]),n("annotation",{encoding:"application/x-tex"},"S(t)=\\frac {1}{1+e^{-t}}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.2484em","vertical-align":"-0.4033em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8451em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1"),n("span",{class:"mbin mtight"},"+"),n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"e"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7253em"}},[n("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[n("span",{class:"pstrut",style:{height:"2.5em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"âˆ’"),n("span",{class:"mord mathnormal mtight"},"t")])])])])])])])])])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"â€‹")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.4033em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])],-1),m=a(`<p>We can implement sigmoid function with python and numpy like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
z <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s implement it in OpenCV with cpp. Suppose we&#39;ve got a output from a neural network as a [1, h, w] cv::Mat named <code>pred</code>. We then do something like <code>pred = sigmoid(pred)</code>.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cv<span class="token double-colon punctuation">::</span>Mat <span class="token function">sigmoid</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> pred<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  cv<span class="token double-colon punctuation">::</span>Mat z<span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>pred<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  z <span class="token operator">=</span> <span class="token number">1.f</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1.f</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Done. Simple. ðŸ˜Š</p><h2 id="channels-split-and-merge" tabindex="-1"><a class="header-anchor" href="#channels-split-and-merge" aria-hidden="true">#</a> Channels split and merge</h2><p>In numpy or other numpy like apis, we can do a slice operation like this,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  temp <span class="token operator">=</span> preds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This operation will create a snap shot variable of the first two channels. In OpenCV, we can simulate the operations through channels split and merge.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&gt;</span> preds_split<span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span><span class="token function">split</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> preds_split<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// assert(preds_channels.size() == preds.channels())</span>
  
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&gt;</span> preds_temp <span class="token operator">=</span> <span class="token punctuation">{</span>preds_split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preds_split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span>Mat temp<span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span><span class="token function">merge</span><span class="token punctuation">(</span>preds_temp<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditioning-filter-elements-of-numpy-matrice" tabindex="-1"><a class="header-anchor" href="#conditioning-filter-elements-of-numpy-matrice" aria-hidden="true">#</a> Conditioning Filter Elements of Numpy matrice</h2><p>Suppose we have a numpy 2d array, which the first channel is the score map of input image. Now we need to filter the pixels greater than the threshold.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  pred_score <span class="token operator">=</span> preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#extract the first channel of preds output</span>
  pred_mask <span class="token operator">=</span> pred_score <span class="token operator">&gt;</span> min_confidence 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The implementation in c++</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&gt;</span> preds<span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span><span class="token function">split</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> preds<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span>Mat pred_score <span class="token operator">=</span> preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  cv<span class="token double-colon punctuation">::</span><span class="token function">threshold</span><span class="token punctuation">(</span>pred_score<span class="token punctuation">,</span> pred_mask<span class="token punctuation">,</span> min_confidence<span class="token punctuation">,</span> <span class="token number">1.f</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cv<span class="token double-colon punctuation">::</span><span class="token function">multiply</span><span class="token punctuation">(</span>pred_mask<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> pred_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pred_mask<span class="token punctuation">.</span><span class="token function">convertTo</span><span class="token punctuation">(</span>pred_mask<span class="token punctuation">,</span> CV_8U<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="not-finished" tabindex="-1"><a class="header-anchor" href="#not-finished" aria-hidden="true">#</a> Not finished.</h2>`,16);function k(h,v){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("From wikipedia: "),n("a",r,[s("Sigmoid_function"),l(e)])]),d,m])}const f=t(i,[["render",k],["__file","2022-03-26-numpy-to-opencv-mat-tips.html.vue"]]);export{f as default};
