import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c,a as n,b as e,d as s,f as l}from"./app-69c59381.js";const p={},d=l(`<h2 id="开启face-recognition的cuda支持的方法" tabindex="-1"><a class="header-anchor" href="#开启face-recognition的cuda支持的方法" aria-hidden="true">#</a> 开启face_recognition的CUDA支持的方法</h2><p>face_recognition是一个python包，用于人脸识别。属于基础的人脸识别包，支持人脸检测、人脸编码、人脸比对等功能。<br> face_recognition包支持使用GPU进行加速，但是默认情况下是不开启的。<br> 也就是说，直接用Pip或这conda方式进行安装，装上的包基本上是不支持GPU计算的。<br> face_recognition的核心计算部分依赖dlib，所以需要安装dlib的GPU版本。如需要使用GPU进行加速的时候，需要安装CUDA和cuDNN。安装dlib的GPU版本，需要下载代码，开启cuda和cudnn支持，然后编译安装。<br> 下面介绍一下安装过程。</p><h3 id="核心-编译安装dlib-with-cuda" tabindex="-1"><a class="header-anchor" href="#核心-编译安装dlib-with-cuda" aria-hidden="true">#</a> 核心：编译安装dlib with CUDA</h3><p>官方文档介绍开启cuda支持的dlib的安装过程如下：</p><h2 id="installing-dlib-using-conda-with-cuda-enabled" tabindex="-1"><a class="header-anchor" href="#installing-dlib-using-conda-with-cuda-enabled" aria-hidden="true">#</a> Installing dlib using <code>conda</code> with CUDA enabled</h2><p>Prerequisite: <code>conda</code> and/or <code>miniconda</code> are already installed</p><ol><li>Create a conda environment.</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ conda create -n dlib python=3.8 cmake ipython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Activate the environment.</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ conda activate dlib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Install CUDA and cuDNN with <code>conda</code> using nvidia channel</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ conda install cuda cudnn -c nvidia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then find the path to the <code>nvcc</code> of this environment. We will use this path for the build step below</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$which nvcc
/path/to/your/miniconda3/envs/dlib/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Install dlib.<br> Clone and build dlib from source</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>$ git clone https://github.com/davisking/dlib.git
$ cd dlib
$ mkdir build
$ cd build
$ cmake .. -DDLIB_USE_CUDA=1 -DUSE_AVX_INSTRUCTIONS=1 -DCUDAToolkit_ROOT=/path/to/your/miniconda3/envs/dlib/bin/
$ cmake --build .
$ cd ..
$ python setup.py install --set DLIB_USE_CUDA=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Test dlib</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>(dlib) $ ipython
Python 3.8.12 (default, Oct 12 2021, 13:49:34)
Type &#39;copyright&#39;, &#39;credits&#39; or &#39;license&#39; for more information
IPython 7.27.0 -- An enhanced Interactive Python. Type &#39;?&#39; for help.

In [1]: import dlib

In [2]: dlib.DLIB_USE_CUDA
Out[2]: True

In [3]: print(dlib.cuda.get_num_devices())
1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样测试dlib如果成功支持了cuda，那么face_recognition也就支持了cuda。我在docker内做了测试，我的系统配置是</p><ul><li>ubuntu 20.04</li><li>cuda 11.3</li><li>cudnn 8.2.1</li><li>python 3.8</li></ul><h2 id="一点讨论" tabindex="-1"><a class="header-anchor" href="#一点讨论" aria-hidden="true">#</a> 一点讨论</h2><h3 id="简洁性" tabindex="-1"><a class="header-anchor" href="#简洁性" aria-hidden="true">#</a> 简洁性</h3><p>如果纯粹为了调包实现人脸识别，face_recognition是最佳选择。因为它的封装和逻辑足够简单。这里看一下官方文档的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> face_recognition
image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">&quot;your_file.jpg&quot;</span><span class="token punctuation">)</span>
face_locations <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_locations<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仅需要这样几行代码，就可以实现人脸检测。如果需要更多的功能，比如人脸比对，人脸编码等，也是非常简单的。</p><p>如果做人脸识别，识别拜登和陌生人，那么可以这样做：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> face_recognition
known_image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">&quot;biden.jpg&quot;</span><span class="token punctuation">)</span>
unknown_image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">&quot;unknown.jpg&quot;</span><span class="token punctuation">)</span>

biden_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>known_image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
unknown_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>unknown_image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

results <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>compare_faces<span class="token punctuation">(</span><span class="token punctuation">[</span>biden_encoding<span class="token punctuation">]</span><span class="token punctuation">,</span> unknown_encoding<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者另外一个例子，识别我自己和陌生人：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> face_recognition

picture_of_me <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">&quot;me.jpg&quot;</span><span class="token punctuation">)</span>
my_face_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>picture_of_me<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># my_face_encoding now contains a universal &#39;encoding&#39; of my facial features that can be compared to any other picture of a face!</span>

unknown_picture <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">&quot;unknown.jpg&quot;</span><span class="token punctuation">)</span>
unknown_face_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>unknown_picture<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># Now we can see the two face encodings are of the same person with \`compare_faces\`!</span>

results <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>compare_faces<span class="token punctuation">(</span><span class="token punctuation">[</span>my_face_encoding<span class="token punctuation">]</span><span class="token punctuation">,</span> unknown_face_encoding<span class="token punctuation">)</span>

<span class="token keyword">if</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s a picture of me!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s not a picture of me!&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),r={href:"https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"准确性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#准确性","aria-hidden":"true"},"#"),e(" 准确性")],-1),v={href:"https://pypi.org/project/face-recognition/",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"the world’s simplest face recognition library",-1),m={href:"https://pypi.org/project/insightface/",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),e(" 总结")],-1),h=n("br",null,null,-1),_={href:"https://pypi.org/project/insightface/",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"推荐使用linux测试新的技术和方案，如果担心对自己的环境有损坏，可以像我一样，使用docker。Docker可以支持GPU，甚至可以访问您的网络相机和usb相机，进行实时图像处理功能测试。使用docker唯一一个无法避免的问题可能是，它需要更多的磁盘空间。",-1),f=n("p",null,"参考(References)：",-1),y={href:"https://gist.github.com/nguyenhoan1988/ed92d58054b985a1b45a521fcf8fa781",target:"_blank",rel:"noopener noreferrer"},w={href:"https://wsthub.medium.com/python-real-time-facial-recognition-identification-with-cuda-enabled-4819844ffc80",target:"_blank",rel:"noopener noreferrer"},x={href:"https://pypi.org/project/face-recognition/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://pypi.org/project/insightface/",target:"_blank",rel:"noopener noreferrer"};function D(I,C){const a=o("ExternalLinkIcon");return t(),c("div",null,[d,n("p",null,[e("文档推荐了一个例子"),n("a",r,[e("example"),s(a)]),e("，可以参考。")]),u,n("p",null,[e("在pypi的"),n("a",v,[e("文档"),s(a)]),e("中，明确写了face_recognition是全世界最简单的人脸识别库("),b,e(")，但是人脸识别依赖dlib，model准确率在lfw是99.38%。这个准确率只能说是马马虎虎，不是很高。如果需要更高的准确率，可以考虑使用其他的人脸识别库，比如"),n("a",m,[e("insightface"),s(a)]),e("。看一下目前insightface 提供的人脸识别模型，在lfw上都在99.7%以上。")]),g,n("p",null,[e("face_recognition是一个非常简单的人脸识别库，但是准确率不高，并且默认安装并不支持CUDA计算，完全采用cpu计算。当一帧图像中人脸数目增加，计算负载是与人脸数目线性相关，对应其每帧消耗的人脸特征提取时间线性增加。如果完全依赖cpu，会引起操作系统卡顿。这样的负载，会让cpu不堪重负，尤其对于实时性要求高的程序来说。把计算负载转移到GPU是一个不错的方案，即令face_re cognition支持cuda计算。由于face_recognition核心计算部分依赖dlib，所以重新编译安装dlib，使其支持cuda计算，就可以实现face_recognition支持cuda计算。"),h,e(" 如果需要更高的准确率，可以考虑使用其他的人脸识别库，比如"),n("a",_,[e("insightface"),s(a)]),e("。")]),k,f,n("p",null,[n("a",y,[e("Installing dlib using conda with CUDA enabled"),s(a)])]),n("p",null,[n("a",w,[e("python-real-time-facial-recognition-identification-with-cuda-enabled"),s(a)])]),n("p",null,[n("a",x,[e("pypi/face-recognition"),s(a)])]),n("p",null,[n("a",U,[e("insightface"),s(a)])])])}const $=i(p,[["render",D],["__file","2023-03-31-enable-face-recognition-cuda.html.vue"]]);export{$ as default};
